unit TestClasse.Processa;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Classe.Processa.Texto, System.Classes, System.SysUtils, System.DateUtils;

type
  // Test methods for class TProcessaTexto
  TestTProcessaTexto = class(TTestCase)
  strict private
    FProcessaTexto: TProcessaTexto;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestMetadeDoTexto;
    procedure TestVelociadeCopiaTexto;
  end;

implementation

procedure TestTProcessaTexto.SetUp;
begin
  FProcessaTexto := TProcessaTexto.Create;
end;

procedure TestTProcessaTexto.TearDown;
begin
  FProcessaTexto.Free;
  FProcessaTexto := nil;
end;

procedure TestTProcessaTexto.TestMetadeDoTexto;
var
  ReturnValue: string;
  pTexto: string;
begin
  // TODO: Setup method call parameters

  pTexto := 'lololo';

  ReturnValue := FProcessaTexto.MetadeDoTexto(pTexto);

  Assert(ReturnValue.Length = (pTexto.Length div 2), 'Tamanho de retorno incorreto');
  Assert(ReturnValue = Copy(pTexto, 1, pTexto.Length div 2), 'Texto inicial diferente do original');

  // TODO: Validate method results
end;

procedure TestTProcessaTexto.TestVelociadeCopiaTexto;
var
  pTexto: string;
  ReturnValue: string;
  lIni: TDateTime;
  lDiff: Int64;
begin
  pTexto := 'lololo';
  lIni := Now;

  ReturnValue := FProcessaTexto.MetadeDoTexto(pTexto);
  lDiff := MilliSecondsBetween(Now, lIni);
  Assert(lDiff  < 100 , 'Performace inapropriada');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTProcessaTexto.Suite);
end.

